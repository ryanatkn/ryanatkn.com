import type {Gen} from '@grogarden/gro/gen.js';
import {cwd} from 'node:process';
import {join, relative} from 'node:path';

import {create_atom_feed} from '$lib/feed.js';
import {
	collect_blog_post_ids,
	load_blog_post_modules,
	resolve_blog_post_item,
} from '$lib/blog_helpers.js';
import type {BlogFeed, BlogModule} from '$lib/blog.js';

// TODO extract to @fuz.dev/fuz_blog

export const gen: Gen = async ({origin_id}) => {
	// TODO @multiple parameterize and refactor
	const dir = cwd();
	const blog_dirname = 'blog';
	const routes_path = 'src/routes'; // TODO read from SvelteKit config;
	const blog_dir = join(dir, routes_path, blog_dirname);
	const {blog} = (await import(join(blog_dir, 'blog.js'))) as BlogModule; // TODO zod parse

	const generated_by = relative(dir, origin_id);

	const blog_post_ids = await collect_blog_post_ids(blog_dir);

	const modules = await load_blog_post_modules(blog_post_ids, blog_dirname);

	// TODO zod schema validation including parsing the status context url (with zod?)
	// for (const mod of modules) {
	// 	validate_blog_post(mod.post)
	// }

	const blog_url = blog.id + blog_dirname;

	const items = modules.map((mod, i) => resolve_blog_post_item(i + 1, blog_url, mod.post));

	const feed: BlogFeed = {...blog, items};

	return [
		{
			filename: join(dir, 'static/blog/feed.xml'),
			content: create_atom_feed(feed),
		},
		{
			filename: join(blog_dir, 'feed.ts'),
			content: `
				// generated by ${generated_by}

				import type {BlogFeed} from '$lib/blog.js';

				export const feed: BlogFeed = ${JSON.stringify(feed)}

				// generated by ${generated_by}
			`,
		},
		...(await Promise.all(
			modules.map(async (item, i) => {
				const post = item.post;
				const slug = post.slug;
				const blog_post_id = i + 1;
				return {
					filename: join(blog_dir, slug, '+page.svelte'),
					content: `
						<!-- generated by ${generated_by} -->

						<script lang="ts">
							import BlogPost${blog_post_id} from '../${blog_post_id}/+page.svelte';
						</script>

						<BlogPost${blog_post_id} />

						<!-- generated by ${generated_by} -->
					`,
				};
			}),
		)),
	];
};

// const to_prerender_entries = (blog: Feed): string[] => {
// 	const entries = [];
// 	for (let index = 0; index < blog.items.length; index++) {
// 		const item = blog.items[index];
// 		const {pathname} = new URL(item.url);
// 		entries.push(pathname);
// 		// replace the last segment with the index
// 		for (let i = pathname.length - 1; i >= 0; i--) {
// 			if (pathname[i] === '/') {
// 				entries.push(pathname.substring(0, i + 1) + (1 + index));
// 				break;
// 			}
// 		}
// 	}
// 	return entries;
// };
