import type {Gen} from '@grogarden/gro/gen.js';
import {exists} from '@grogarden/gro/exists.js';
import {cwd} from 'node:process';
import {join, relative} from 'node:path';

import {create_atom_feed} from '$lib/feed.js';

// TODO extract to @fuz.dev/fuz_blog

export const gen: Gen = async ({origin_id}) => {
	// TODO parameterize
	const dir = cwd();
	const blog_dirname = 'blog';
	const blog_dir = join(dir, 'src/routes', blog_dirname); // TODO routes should be read from SvelteKit config

	const generated_by = relative(dir, origin_id);

	const {feed} = await import(join(blog_dir, 'feed.js')); // TODO BLOCK using this is a problem because it relies on `posts`

	// TODO BLOCK compare feed.items to the collected ones - can't use feed

	const items = await collect_blog_items(blog_dir);

	return [
		{
			filename: join(dir, 'static/blog/feed.xml'),
			content: create_atom_feed(feed),
		},
		{
			filename: join(blog_dir, 'posts.ts'),
			content: `
				// generated by ${generated_by}

				import type {FeedItem} from '$lib/feed.js';
				${items
					.map(
						(item) =>
							`import {post as post${item}} from '$routes/${blog_dirname}/${item}/+page.svelte'`,
					)
					.join(';\n')};

				export const posts: FeedItem[] = [${items.map((i) => `post${i}`).join(', ')}];

				// generated by ${generated_by}
			`,
		},
		// TODO BLOCK generate for each routes/blog/${slug}
		...(await Promise.all(
			items.map(async (item) => {
				const mod = await import(`$routes/${blog_dirname}/${item}/+page.svelte`);
				const post = mod.post;
				const slug = post.url.split('/').at(-1)!; // TODO BLOCK maybe put the slug on the item and construct the URL
				return {
					filename: join(blog_dir, slug, '+page.svelte'),
					content: `
						<!-- generated by ${generated_by} -->

						<script lang="ts">
							import BlogPost${item} from '../${item}/+page.svelte';
						</script>

						<BlogPost${item} />

						<!-- generated by ${generated_by} -->
					`,
				};
			}),
		)),
	];
};

// const to_prerender_entries = (blog: Feed): string[] => {
// 	const entries = [];
// 	for (let index = 0; index < blog.items.length; index++) {
// 		const item = blog.items[index];
// 		const {pathname} = new URL(item.url);
// 		entries.push(pathname);
// 		// replace the last segment with the index
// 		for (let i = pathname.length - 1; i >= 0; i--) {
// 			if (pathname[i] === '/') {
// 				entries.push(pathname.substring(0, i + 1) + (1 + index));
// 				break;
// 			}
// 		}
// 	}
// 	return entries;
// };

const collect_blog_items = async (blog_dir: string): Promise<number[]> => {
	const items: number[] = [];

	let i = 1;
	while (true) {
		// eslint-disable-next-line no-await-in-loop
		if (!(await exists(join(blog_dir, `${i}/+page.svelte`)))) {
			break;
		}
		items.push(i);
		i++;
	}

	return items;
};
