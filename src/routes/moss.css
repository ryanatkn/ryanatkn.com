/* generated by gro_plugin_moss */

.pixelated {
	image-rendering: -webkit-optimize-contrast; /* Safari */
	image-rendering: -o-crisp-edges; /* OS X & Windows Opera (12.02+) */
	image-rendering: pixelated; /* in case crisp-edges isn't supported */
	image-rendering: crisp-edges; /* the recommended pixel art setting according to MDN */
}

.box {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
}

/* can be used to override the direction of a `.box` */
.row {
	display: flex;
	flex-direction: row;
	align-items: center;
}

.ellipsis {
	display: block;
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}

.width_sm {
	width: 100%;
	max-width: var(--distance_sm);
}

.width_md {
	width: 100%;
	max-width: var(--distance_md);
}

/* A panel is a box embedded into the page, useful for visually isolating content. */
.panel {
	border-radius: var(--radius_xs);
	background-color: var(--panel_bg, var(--fg_1));
}

/* TODO other button variants? */
/* TODO this is slightly strange that it doesn't use --icon_size */
/* These are used as modifiers to buttons, and so they use `:where` so they cascade. */
.icon_button {
	width: var(--input_height);
	height: var(--input_height);
	min-width: var(--input_height);
	min-height: var(--input_height);
	flex-shrink: 0;
	line-height: 1;
	font-weight: 900;
	padding: 0;
}

/* TODO maybe this belongs with the reset, like `selected`? or does `selected` belong here? */
.plain:not(:hover) {
	--border_color: transparent;
	box-shadow: none;
	--button_fill: transparent;
}
.plain:hover,
.plain:active {
	--border_color: transparent;
}

.menu_item {
	--border_radius: 0;
	--border_color: var(--border_color_3);
	position: relative;
	z-index: 2;
	cursor: pointer;
	width: 100%;
	min-height: var(--min_height, var(--icon_size_sm));
	display: flex;
	justify-content: space-between;
	align-items: center;
	padding: var(--menu_item_padding, var(--space_xs3) var(--space_xs));
}
.menu_item.selected {
	/* TODO different patterns for border and bg? */
	--border_color: var(--color_a_5);
	background-color: var(--fg_1);
	z-index: 1;
	cursor: default;
}
.menu_item.selected.deselectable:not(:disabled) {
	cursor: pointer;
}
.menu_item:hover {
	--border_color: var(--border_color_3);
	background-color: var(--fg_0);
}
.menu_item:active,
.menu_item.selected:hover {
	--border_color: var(--border_color_3);
	background-color: var(--fg_2);
}
.menu_item.plain {
	border: none;
}
.menu_item .content {
	display: flex;
	align-items: center;
	flex: 1;
	/* allows the flex children to shrink */
	min-width: 0;
}
.menu_item .icon {
	width: var(--icon_size, var(--icon_size_md));
	margin-right: var(--space_sm);
	flex-shrink: 0;
	text-align: center;
	font-weight: 900;
}
.menu_item .title {
	margin-right: var(--space_lg);
	flex-shrink: 1;
	overflow: hidden;
	white-space: nowrap;
	text-overflow: ellipsis;
	line-height: var(--line_height_lg); /* prevents the bottom of g's and others from being cut off */
}

.chip {
	font-weight: 600;
	padding-left: var(--space_xs);
	padding-right: var(--space_xs);
	background-color: var(--fg_1);
	border-radius: var(--radius_xs);
}
a.chip {
	font-weight: 700;
}

.relative {
	position: relative;
}
.overflow_auto {
	overflow: auto;
}
.display_contents {
	display: contents;
}
.inline {
	display: inline;
}
.inline_flex {
	display: inline-flex;
}
.block {
	display: block;
}
.flex {
	display: flex;
}
.flex_1 {
	flex: 1;
}
.flex_wrap {
	flex-wrap: wrap;
}
.align_items_center {
	align-items: center;
}
.float_right {
	float: right;
}
.flip_x {
	transform: scaleX(-1);
}
.font_mono {
	font-family: var(--font_mono);
}
.icon_size_lg {
	font-size: var(--icon_size_lg);
	--size: var(--icon_size_lg);
}
.text_align_center {
	text-align: center;
}
.white_space_nowrap {
	white-space: nowrap;
}
.bg {
	background-color: var(--bg);
}
.radius_50 {
	border-radius: 50%;
}
.shadow_xs {
	box-shadow: var(--shadow_xs)
		color-mix(in hsl, var(--shadow_color) var(--shadow_alpha, var(--shadow_alpha_1)), transparent);
}
.shadow_md {
	box-shadow: var(--shadow_md)
		color-mix(in hsl, var(--shadow_color) var(--shadow_alpha, var(--shadow_alpha_3)), transparent);
}
.shadow_inset_xs {
	box-shadow: var(--shadow_inset_xs)
		color-mix(in hsl, var(--shadow_color) var(--shadow_alpha, var(--shadow_alpha_1)), transparent);
}
.w_100 {
	width: 100%;
}
.h_100 {
	height: 100%;
}
.p_sm {
	padding: var(--space_sm);
}
.p_md {
	padding: var(--space_md);
}
.p_lg {
	padding: var(--space_lg);
}
.p_xl {
	padding: var(--space_xl);
}
.pr_md {
	padding-right: var(--space_md);
}
.pb_md {
	padding-bottom: var(--space_md);
}
.pl_md {
	padding-left: var(--space_md);
}
.px_xl {
	padding-left: var(--space_xl);
	padding-right: var(--space_xl);
}
.py_md {
	padding-top: var(--space_md);
	padding-bottom: var(--space_md);
}
.py_xl {
	padding-top: var(--space_xl);
	padding-bottom: var(--space_xl);
}
.mt_md {
	margin-top: var(--space_md);
}
.mt_xl5 {
	margin-top: var(--space_xl5);
}
.mr_xs {
	margin-right: var(--space_xs);
}
.mr_lg {
	margin-right: var(--space_lg);
}
.mb_0 {
	margin-bottom: 0;
}
.mb_lg {
	margin-bottom: var(--space_lg);
}
.mb_xl2 {
	margin-bottom: var(--space_xl2);
}
.mb_xl5 {
	margin-bottom: var(--space_xl5);
}
.mb_xl7 {
	margin-bottom: var(--space_xl7);
}
.ml_xs {
	margin-left: var(--space_xs);
}
.ml_sm {
	margin-left: var(--space_sm);
}
.ml_md {
	margin-left: var(--space_md);
}
.gap_xs {
	gap: var(--space_xs);
}
.gap_md {
	gap: var(--space_md);
}
.gap_xl2 {
	gap: var(--space_xl2);
}

/* generated by gro_plugin_moss */
